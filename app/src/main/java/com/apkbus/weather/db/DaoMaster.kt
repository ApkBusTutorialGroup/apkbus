package com.apkbus.weather.db

import android.content.Context
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteDatabase.CursorFactory
import android.util.Log
import com.apkbus.weather.db.Dao.CityBeanDao
import com.apkbus.weather.db.Dao.DistrictBeanDao
import com.apkbus.weather.db.Dao.ProvinceBeanDao

import org.greenrobot.greendao.AbstractDaoMaster
import org.greenrobot.greendao.database.StandardDatabase
import org.greenrobot.greendao.database.Database
import org.greenrobot.greendao.database.DatabaseOpenHelper
import org.greenrobot.greendao.identityscope.IdentityScopeType


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version 1): knows all DAOs.
 */
class DaoMaster(db: Database) : AbstractDaoMaster(db, SCHEMA_VERSION) {

    constructor(db: SQLiteDatabase) : this(StandardDatabase(db))

    init {
        registerDaoClass(CityBeanDao::class.java)
        registerDaoClass(DistrictBeanDao::class.java)
        registerDaoClass(ProvinceBeanDao::class.java)
    }

    override fun newSession(): DaoSession {
        return DaoSession(db, IdentityScopeType.Session, daoConfigMap)
    }

    override fun newSession(type: IdentityScopeType): DaoSession {
        return DaoSession(db, type, daoConfigMap)
    }

    /**
     * Calls [.createAllTables] in [.onCreate] -
     */
    abstract class OpenHelper : DatabaseOpenHelper {
        constructor(context: Context, name: String) : super(context, name, SCHEMA_VERSION) {}

        constructor(context: Context, name: String, factory: CursorFactory) : super(context, name, factory, SCHEMA_VERSION) {}

        override fun onCreate(db: Database?) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION)
            createAllTables(db, false)
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development.  */
    abstract class DevOpenHelper : OpenHelper {
        constructor(context: Context, name: String) : super(context, name) {}

        constructor(context: Context, name: String, factory: CursorFactory) : super(context, name, factory) {}

        override fun onUpgrade(db: Database?, oldVersion: Int, newVersion: Int) {
            Log.i("greenDAO", "Upgrading schema from version $oldVersion to $newVersion by dropping all tables")
            dropAllTables(db, true)
            onCreate(db)
        }
    }

    companion object {
        val SCHEMA_VERSION = 1

        /** Creates underlying database table using DAOs.  */
        fun createAllTables(db: Database?, ifNotExists: Boolean) {
            CityBeanDao.createTable(db, ifNotExists)
            DistrictBeanDao.createTable(db, ifNotExists)
            ProvinceBeanDao.createTable(db, ifNotExists)
        }

        /** Drops underlying database table using DAOs.  */
        fun dropAllTables(db: Database?, ifExists: Boolean) {
            CityBeanDao.dropTable(db, ifExists)
            DistrictBeanDao.dropTable(db, ifExists)
            ProvinceBeanDao.dropTable(db, ifExists)
        }

        /**
         * WARNING: Drops all table on Upgrade! Use only during development.
         * Convenience method using a [DevOpenHelper].
         */
        fun newDevSession(context: Context, name: String): DaoSession {
            val dbHelper = object :DevOpenHelper(context, name){}
            val daoMaster = DaoMaster(dbHelper.writableDb)
            return daoMaster.newSession()
        }
    }
}
